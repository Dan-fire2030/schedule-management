// Simplified Service Worker to avoid clone errors

const CACHE_NAME = 'sukemate-v1'

// Install event
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker')
  self.skipWaiting()
})

// Activate event
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker')
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('[SW] Deleting old cache:', cacheName)
            return caches.delete(cacheName)
          }
        })
      )
    })
  )
  self.clients.claim()
})

// Remove fetch event listener to avoid no-op warning
// If needed, implement proper caching later
// self.addEventListener('fetch', (event) => {
//   // Proper fetch handling would go here
// })

// Push notifications
self.addEventListener('push', (event) => {
  console.log('[SW] Push event received:', event)
  
  let notificationData = {
    title: 'スケマネ',
    body: '新しい通知があります',
    icon: '/favicon.ico',
    data: {}
  }

  if (event.data) {
    try {
      const pushData = event.data.json()
      notificationData = {
        title: pushData.title || notificationData.title,
        body: pushData.body || notificationData.body,
        icon: pushData.icon || notificationData.icon,
        data: pushData.data || notificationData.data
      }
    } catch (error) {
      console.warn('[SW] Failed to parse push data:', error)
      notificationData.body = event.data.text()
    }
  }

  const options = {
    body: notificationData.body,
    icon: notificationData.icon,
    vibrate: [200, 100, 200],
    data: {
      ...notificationData.data,
      dateOfArrival: Date.now(),
      url: notificationData.data.url || '/'
    },
    requireInteraction: true
  }

  event.waitUntil(
    self.registration.showNotification(notificationData.title, options)
  )
})

// Notification click
self.addEventListener('notificationclick', (event) => {
  console.log('[SW] Notification clicked:', event.action, event.notification.data)
  
  event.notification.close()

  if (event.action === 'dismiss') {
    return
  }

  const urlToOpen = event.notification.data?.url || '/'
  
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        for (let i = 0; i < clientList.length; i++) {
          const client = clientList[i]
          if (client.url.includes(urlToOpen.split('?')[0]) && 'focus' in client) {
            console.log('[SW] Focusing existing window')
            return client.focus()
          }
        }
        
        if (clients.openWindow) {
          console.log('[SW] Opening new window:', urlToOpen)
          return clients.openWindow(urlToOpen)
        }
      })
  )
})